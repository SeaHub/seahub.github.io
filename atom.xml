<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Words Of Life</title>
  <subtitle>Record the things appearing in my life</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-10-13T04:42:22.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Seahub</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>从小实验探C#代码优化</title>
    <link href="http://yoursite.com/2016/10/12/%E4%BB%8E%E5%B0%8F%E5%AE%9E%E9%AA%8C%E6%8E%A2C#%E4%BB%A3%E7%A0%81%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96/"/>
    <id>http://yoursite.com/2016/10/12/从小实验探C#代码性能优化/</id>
    <published>2016-10-12T14:45:15.000Z</published>
    <updated>2016-10-13T04:42:22.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>摘要：一个C#小实验引起的代码性能探究</p>
<a id="more"></a>
<hr>
</li>
<li><p>前言</p>
<ul>
<li><p>本文源于一个C#小实验：生成防伪码。与其他以“完成目标”为要求的实验不同，该实验以“性能优化”为要求。实验题目（见下）很简单，简单的数行代码即可实现。而如何让代码达到最佳的性能，即以最短的运行时间运行，成为了我纠结的问题。此处仅以此文记录我的思考过程，望日后有助于同行。</p>
<blockquote>
<ul>
<li>小实验题目：生成防伪码</li>
</ul>
<ol>
<li>防伪码由以下字符组成：0123456789ABCDEFGHJKLMNPQRSTUVWXYZ（数字1和字母I相近、数字0和字母O相近，所以去掉字母I和字母O，全部字母大写）</li>
<li>在命令行中输入2个参数，分别是：防伪码长度与防伪码个数。例如：在命令行中调用程序为“应用程序.exe 10 10000”指的是防伪码长度为10，生成10000个防伪码。</li>
<li>输出结果：时间（单位：ms）</li>
</ol>
<ul>
<li>注意</li>
</ul>
<ol>
<li>不需要输出每个防伪码（在调试时输出防伪码可用于检验生成码的正确性，正式输出时只输出一项结果即运行程序所需要的时间）</li>
<li>防伪码的长度由命令行参数决定</li>
<li>所生成的防伪码不能重复（按照以上例子，生成了10000个防伪码，这10000个防伪码就肯定不能重复）</li>
</ol>
</blockquote>
</li>
</ul>
</li>
<li><p>先贴出公用模板 - 下述其他代码默认嵌套在此模板内执行</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div><div class="line">54</div><div class="line">55</div><div class="line">56</div><div class="line">57</div><div class="line">58</div><div class="line">59</div><div class="line">60</div></pre></td><td class="code"><pre><div class="line">// *****************************************************</div><div class="line">// author: @Seahub Seahubc@gmail.com || Seahubc@qq.com</div><div class="line">// 实验一：生成防伪码</div><div class="line">// 防伪码组成元素：0123456789ABCDEFGHIJKLMNPQRSTUVWXYZ</div><div class="line">// input:  防伪码长度 防伪码个数</div><div class="line">// output: 防伪码运行所需时间</div><div class="line">// PS: 防伪码不能重复</div><div class="line">// *****************************************************</div><div class="line">// 测试样例：生成防伪码长度为10，防伪码个数为1,000,000的运算时间</div><div class="line">// 测试环境：Win7 i5-4670T 16GB内存</div><div class="line">// *****************************************************</div><div class="line">using System;</div><div class="line">using System.Collections.Generic;</div><div class="line">using System.Linq;</div><div class="line">using System.Text;</div><div class="line">using System.Threading.Tasks;</div><div class="line">using System.Diagnostics;</div><div class="line">using System.Collections;</div><div class="line"></div><div class="line">namespace SecurityCode</div><div class="line">&#123;</div><div class="line">    class Program</div><div class="line">    &#123;</div><div class="line">        static void Main(string[] args)</div><div class="line">        &#123;</div><div class="line">            // ===================== 固定常量 =====================</div><div class="line">            const String charArr = &quot;0123456789ABCDEFGHIJKLMNPQRSTUVWXYZ&quot;;</div><div class="line"></div><div class="line">            // ===================== 获取参数 =====================</div><div class="line">            int lengthOfSecurityCode = 0;</div><div class="line">            int numberOfSecurityCode = 0;</div><div class="line">            if (args.Length &lt; 2)</div><div class="line">            &#123;</div><div class="line">                // 当args带的参数 &lt; 2时，提示输入两个参数</div><div class="line">                System.Console.WriteLine(&quot;Please input parameter - &quot; +</div><div class="line">                    &quot;lengthOfSecurityCode:&quot;);</div><div class="line">                lengthOfSecurityCode = Convert.ToInt32(Console.ReadLine());</div><div class="line">                System.Console.WriteLine(&quot;Please input parameter - &quot; +</div><div class="line">                    &quot;numberOfSecurityCode:&quot;);</div><div class="line">                numberOfSecurityCode = Convert.ToInt32(Console.ReadLine());</div><div class="line">            &#125; else &#123;</div><div class="line">                lengthOfSecurityCode = int.Parse(args[0]);</div><div class="line">                numberOfSecurityCode = int.Parse(args[1]);</div><div class="line">            &#125;</div><div class="line"></div><div class="line">            // ===================== 开始计时 =====================</div><div class="line">            Stopwatch timer = new Stopwatch();</div><div class="line">            timer.Start();</div><div class="line">          	</div><div class="line">          	// ===================== 核心函数 =====================</div><div class="line">          	// toDo - 下述思考过程代码将代替此部分</div><div class="line">          </div><div class="line">            // =================== 停止计时并输出 ==================</div><div class="line">            timer.Stop();</div><div class="line">            double dMilliseconds = timer.Elapsed.TotalMilliseconds;</div><div class="line">            System.Console.WriteLine(&quot;生成个数为：&quot; + numberOfSecurityCode +</div><div class="line">                &quot;，运行时间为：&quot; + dMilliseconds + &quot;s&quot;);</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>思考过程的第一个实现 - 利用HashSet + StringBuilder 简单实现（下述代码代替公用模板toDO部分）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// *****************************************************</div><div class="line">// 测试样例：生成防伪码长度为10，防伪码个数为1,000,000的运算时间</div><div class="line">// 测试环境：Win7 i5-4670T 16GB内存</div><div class="line">// 测试结果：826.5098s</div><div class="line">// *****************************************************</div><div class="line">HashSet&lt;String&gt; result = new HashSet&lt;String&gt;();</div><div class="line">Random random = new Random();</div><div class="line">StringBuilder sb = new StringBuilder(lengthOfSecurityCode);</div><div class="line"></div><div class="line">while (result.Count != numberOfSecurityCode)</div><div class="line">&#123;</div><div class="line">	sb.Clear();</div><div class="line">	for (int i = 0; i &lt; lengthOfSecurityCode; ++i)</div><div class="line">	&#123;</div><div class="line">		// 生成一个随机数</div><div class="line">		int idx = random.Next(0, charArr.Length);</div><div class="line">		sb.Append(charArr[idx]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	result.Add(sb.ToString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>代码分析</p>
<ul>
<li>思路：利用sb去存储字符组成字符串，因为防伪码不能重复，所以将生成防伪码后加入HashSet</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>思考过程的第二个实现 - HashSet + StringBuilder + 少量优化（下述代码代替公用模板toDO部分）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line">// *****************************************************</div><div class="line">// 测试样例：生成防伪码长度为10，防伪码个数为1,000,000的运算时间</div><div class="line">// 测试环境：Win7 i5-4670T 16GB内存</div><div class="line">// 测试结果：688.5649ms</div><div class="line">// *****************************************************</div><div class="line">HashSet&lt;String&gt; result = new HashSet&lt;String&gt;();</div><div class="line">Random random = new Random();</div><div class="line">StringBuilder sb = new StringBuilder(lengthOfSecurityCode);</div><div class="line">int charArrlength = charArr.Length;</div><div class="line"></div><div class="line">while (result.Count != numberOfSecurityCode)</div><div class="line">&#123;</div><div class="line">	sb.Length = 0;</div><div class="line">	for (int i = 0; i &lt; lengthOfSecurityCode; ++i)</div><div class="line">	&#123;</div><div class="line">		// 生成一个随机数</div><div class="line">		int idx = random.Next(charArrlength);</div><div class="line">		sb.Append(charArr[idx]);</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	result.Add(sb.ToString());</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>代码分析</p>
<ul>
<li>上述代码我的优化如下，下面的数据采用了控制变量进行测量<ul>
<li>优化一：使用了<code>charArrlength</code>代替了<code>charArr.Length</code><ul>
<li>成功优化的原因：避免多次调用</li>
<li>优化结果：<em>减少 715.5070ms -  688.5649ms  = 26.9421ms</em></li>
</ul>
</li>
<li>优化二：使用了<code>random.Next(charArrlength)</code>代替了<code>random.Next(0, charArrlength)</code><ul>
<li>成功优化的原因：未知</li>
<li>优化结果：<em>减少 798.8720ms -  688.5649ms = 110.3071ms</em></li>
</ul>
</li>
<li>优化三：使用了<code>sb.Length = 0</code>代替了<code>sb.clear()</code><ul>
<li>成功优化的原因：未知</li>
<li>优化结果：<em>减少 692.9382ms - 688.5649ms = 4.3733ms</em></li>
</ul>
</li>
</ul>
</li>
<li>一开始我以为对性能优化最多的应该是优化一。没想到却是偶尔一试的优化二使得时间大幅下降，实在是意料之外。奈何自身水平有限，不知道优化二为何能够如此大幅度降低运行时间，猜想应该是<code>random.Next(0, charArrlength)</code>在每次循环内进行了两次判断（一次判断是否大于等于0，一次判断是否小于charArrlength），而random.Next(charArrlength)在每次循环内只判断了上界，所以效率更高。</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li><p>思考过程的第三个实现 - HashSet + 变长字符数组（下述代码代替公用模板toDO部分）</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line">// *****************************************************</div><div class="line">// 测试样例：生成防伪码长度为10，防伪码个数为1,000,000的运算时间</div><div class="line">// 测试环境：Win7 i5-4670T 16GB内存</div><div class="line">// 测试结果：627.5172ms</div><div class="line">// *****************************************************</div><div class="line">HashSet&lt;String&gt; result = new HashSet&lt;String&gt;();</div><div class="line">Random random = new Random();</div><div class="line">char[] charSb = new char[lengthOfSecurityCode];</div><div class="line">int charArrlength = charArr.Length;</div><div class="line"></div><div class="line">while (result.Count != numberOfSecurityCode)</div><div class="line">&#123;</div><div class="line">	for (int i = 0; i &lt; lengthOfSecurityCode; ++i)</div><div class="line">	&#123;</div><div class="line">		// 生成一个随机数</div><div class="line">		int idx = random.Next(charArrlength);</div><div class="line">		charSb[i] = charArr[idx];</div><div class="line">	&#125;</div><div class="line"></div><div class="line">	result.Add(new String(charSb));</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>代码分析</p>
<ul>
<li>使用了变长字符数组来代替StringBuilder<ul>
<li>成功优化的原因：字符数组非对象，减少CLI管理内存的时间损耗以及对象生成时间</li>
<li>优化结果：<em>减少 688.5649ms - 627.5172ms = 61.0477ms</em></li>
</ul>
</li>
<li>思考过后，还是觉得论性能，原生数组应该比对象更加有优势，因此最终我采用了本方案</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>总结：在内存冗余的计算机时代，这点性能优化显得微不足道。然而，在我看来，偶尔研究一下性能，能够更加有助于我们不断改进代码，写出更加高效精炼的“好代码”，做一个会思考的工程师，而非只是堆代码的码农。</li>
</ul>
<hr>
<ul>
<li>Last Edited：2016.10.13</li>
<li>Author：@Seahub</li>
<li>Please <a href="Seahubc@qq.com">contact me</a> if you want to share this Article, 3Q~</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;摘要：一个C#小实验引起的代码性能探究&lt;/p&gt;
    
    </summary>
    
      <category term="C#" scheme="http://yoursite.com/categories/C/"/>
    
      <category term="代码优化" scheme="http://yoursite.com/categories/C/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
    
      <category term="Seahub" scheme="http://yoursite.com/tags/Seahub/"/>
    
      <category term="C#" scheme="http://yoursite.com/tags/C/"/>
    
      <category term="Scau防伪码实验" scheme="http://yoursite.com/tags/Scau%E9%98%B2%E4%BC%AA%E7%A0%81%E5%AE%9E%E9%AA%8C/"/>
    
      <category term="代码优化" scheme="http://yoursite.com/tags/%E4%BB%A3%E7%A0%81%E4%BC%98%E5%8C%96/"/>
    
  </entry>
  
  <entry>
    <title>我所理解的小程序</title>
    <link href="http://yoursite.com/2016/10/09/%E6%88%91%E6%89%80%E7%90%86%E8%A7%A3%E7%9A%84%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    <id>http://yoursite.com/2016/10/09/我所理解的小程序/</id>
    <published>2016-10-09T00:33:54.000Z</published>
    <updated>2016-10-13T04:42:33.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>摘要：Hackathon的见闻与微信小程序的真机初体验</p>
<a id="more"></a>
<hr>
</li>
<li><p>前言</p>
<ul>
<li>之前一直都很想参加一场真正的黑客马拉松，奈何大部分的国内黑客马拉松都在北上杭，而我作为穷苦的学生党，没有额外的资金买车票去远方追求理想与梦想。所幸，2016年第一场在广州举办的黑客马拉松，我有幸坑了两个朋友（后端玩家Samray、Web前端玩家Nomad），一同参与其中，一天多的专注，让我有幸体验了一下未来的小程序，感触颇多，因记此文。文章前半部分叙述Hackathon相关的内容，后半部分叙述小程序相关的内容，读者若对前半部分不感兴趣，跳过即可。</li>
</ul>
<hr>
<h4 id="Hackathon"><a href="#Hackathon" class="headerlink" title="Hackathon"></a>Hackathon</h4><blockquote>
<p>Hackathon Place: GuangZhou TIT iFanr</p>
<p>Hackathon Date: 2016.10.7 10:00 - 2016.10.8 15:00</p>
<p>Hackathon Topic: The Future WeChat App</p>
</blockquote>
<ul>
<li><p>Hackathon Pre：</p>
<ul>
<li>本次Hackathon的主题要求是“未来、实用”。我个人感觉这个主题范围十分宽。思考一个多小时后，我们队伍最终选择的Hackathon Project是Pig Raising，创意参考了<a href="http://www.forestapp.cc/" target="_blank" rel="external">Forest</a>：“在一定时间内，限制人们不能触碰手机，否则任务失败”。之所以想到这个创意，是因为我们认为小程序的弊端在于开启小程序后，微信就不能切换到聊天界面（即微信与微信小程序只能保留一个界面）。我们希望通过Pig Raising将这个弊端消除，使用Pig Raising时，目标就是不使用其他程序，所以即使保留一个界面也无妨。</li>
<li>在开始项目前，我们三人只阅读了官方文档，而且我与另外一位朋友（Samray）都没有JavaScript的编程经验，甚至连部分语法都不太清楚，所以这个项目对我们的速学能力有蛮大的要求。</li>
<li>最后我们决定由Nomad负责WXSS、WXML的页面部分编写，我负责JSON、JavaScript的逻辑部分编写，因为项目不需要后端环境，所以Samray负责美工及路演相关的准备。</li>
</ul>
</li>
<li><p>Hackathon In：</p>
<ul>
<li>Hackathon Environment<ul>
<li>感觉我们队伍使用的Hackathon工具相比其他队伍而言，还是比较有优势的，因此稍作讨论，希望能够给其他Hackathon Team稍作参考<ul>
<li>编程环境：macOS Sierra 10.12 + 微信Web开发者工具 + Egret Wing Verison 3.2.0</li>
<li>同步环境：Resilio Sync Version 2.4.0 + Github</li>
<li>环境使用：微信Web开发者工具用于动作调试，Egret Wing 3用于代码编辑 + 界面预览（官方的IDE代码编辑能力实在太差:-( ）。为了省去合并的烦恼，我和Nomad是同时编辑同一个项目下的不同文件（eg：Nomad编辑index.wxss、index.wxml，我编辑index.json、index.js）。也许你会问，不用git/svn，如何同步合并代码？我们使用了Resilio Sync这个小工具。它能够在电脑上创建一块共享盘，供有同步Key的朋友访问。相比于其他工具，它的同步的速度十分快，我们把项目放在了共享盘中，基本上Nomad一编辑完wxss/wxml后几秒，我这边的项目文件中已经能看到最新的代码了。这样的短延迟完全不影响我们的编码，也省去了事后合并的烦恼。Github在我们团队中主要用来存放了一些请求资源，没有起到项目代码控制的作用。</li>
<li>建议：在能够面对面编程的小团队（3-5人）中，感觉直接使用Resilio Sync合并代码更加有优势</li>
</ul>
</li>
</ul>
</li>
<li>Hackathon Coding<ul>
<li>Coding：编程过程是比较枯燥的，Hackathon中后期基本完成主体功能后就感觉十分困了，后期思路也没有前期的清晰。这个项目的难点主要在于主界面的圆圈倒计时上，其次是Pig Farm界面的随机位置选择上，花了不少时间，其他部分都比较容易。编码对于我这个JavaScript小白而言，就是查文档（微信小程序文档 + JavaScript文档 + w3school资料），感觉项目的实现还是比较容易的。</li>
</ul>
</li>
</ul>
</li>
<li><p>Hackathon After：</p>
<ul>
<li>很遗憾，项目没有荣获什么奖。但是我们的队员收获都挺大的，由于iFanr提供了App ID供我们测试，因此我们也有幸感受到微信小程序的未来，以及认识了一群大神。我个人技术的提升，大概可以说是24小时JavaScript从入门到抢月饼 :-）。感觉不错，但是深感自己的JavaScript代码写的很丑，还是得多多阅读实践方可。</li>
</ul>
</li>
<li><p>Pig Raising项目已经开源，有兴趣的朋友可以前往一试 =&gt; <a href="https://github.com/SeaHub/PigRaising" target="_blank" rel="external">传送门</a>  </p>
<img src="/2016/10/09/我所理解的小程序/1.jpeg" alt="Group Photo" title="Group Photo">
</li>
</ul>
</li>
</ul>
<hr>
<h4 id="Wechat-App"><a href="#Wechat-App" class="headerlink" title="Wechat App"></a>Wechat App</h4><ul>
<li><p>小程序的开发</p>
<ul>
<li>小程序的开发成本总体而言还是比较低的，即使是像我这样不会Web前端的iOS码农，甚至对JavaScript只是一知半懂的iOS码农也能快速在1~2天内开发出一个小程序（当然，看文档时间另算）。</li>
<li>小程序的权限目前而言感觉还是比较收的比较紧的，很多数据都不能够获取，这也暂时限制了微信小程序的应用前景，希望以后会有所放开。</li>
</ul>
</li>
<li><p>小程序的真机体验</p>
<ul>
<li><p>测试环境</p>
<ul>
<li>iPhone 6S Plus</li>
<li>iOS 10</li>
<li>中速偏慢的Wifi环境</li>
</ul>
</li>
<li><p>谈谈体验：总体而言，真机体验和模拟器体验是不一样的。我个人总结为以下几点：</p>
<ul>
<li>模拟器没有显示微信自动生成的导航栏</li>
<li>模拟器的适配布局有偏移(eg:同样是iPhone 6S Plus，模拟器6SP上的(x, y)坐标与真机6SP上的(x, y)坐标有区别，有少量的偏移)</li>
<li>IDE有部分Bug，模拟器上跑的程序正常，但真机上跑的程序可能会出现Bug</li>
<li>微信小程序1M的真机代码大小限制</li>
</ul>
</li>
<li><p>真机调试的坑</p>
<ul>
<li><p>调试的方法</p>
<ul>
<li>真机调试上也有一个类似模拟器中的控制台，同行们同样可以通过console.log()进行调试。二分法调试(注释 + 输出)应该是目前真机小程序的最好方法了。</li>
</ul>
</li>
<li><p>真机运行图</p>
<ul>
<li>目前真机调试的流程：在微信Web开发者工具中上传代码 =&gt; 官方自动生成一个二维码 =&gt; 只有绑定了该App ID的微信用户能够扫描该二维码 =&gt; 扫描后自动在微信中打开小程序</li>
<li>微信导航栏左上角按钮点击后直接返回微信，右上角按钮点击后出现菜单，菜单包含（控制台，推出，取消等按钮）</li>
</ul>
<img src="/2016/10/09/我所理解的小程序/2.jpeg" alt="App" title="App">
</li>
<li><p>第一次将应用弄到手机上跑的时候，主要遇到了几个神奇的Bug，在此分享一下，避免同行入坑</p>
<ul>
<li><p>Bug 1 - IDE Bug - this.data.status</p>
<ul>
<li><p>Bug 1 Code</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> STATUS_WAITING = <span class="number">0</span> <span class="comment">// 应用开始时状态</span></div><div class="line"><span class="keyword">const</span> STATUS_RUNNING = <span class="number">1</span> <span class="comment">// 应用计时状态</span></div><div class="line"><span class="keyword">const</span> STATUS_COMPLETED = <span class="number">2</span> <span class="comment">// 应用完成状态</span></div><div class="line"></div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    <span class="comment">// 计时状态 - 动态</span></div><div class="line">    status: STATUS_WAITING</div><div class="line">  &#125;,</div><div class="line">  </div><div class="line">  startTimer: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="keyword">if</span> (status !== STATUS_RUNNING) &#123;</div><div class="line">  		<span class="comment">// Something</span></div><div class="line">	&#125; <span class="keyword">else</span> &#123;</div><div class="line">  		<span class="comment">// Something</span></div><div class="line">	&#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
</li>
<li><p>Bug 1 Code Review</p>
<ul>
<li>这段代码仔细分析后，应该可以看出是<code>status</code>写错了，应该使用<code>this.data.status</code>获取。这其实是一个比较简单的小问题，为什么我要抽出来说呢？主要是因为这段在模拟器上是能够正常使用的（即IDE通过编译，运行也是正常的，能够触发后续事件）。但是在真机就会出现明显的Bug（卡死，即无反应）。一般而言，官方IDE在我们没有写<code>this.data</code>时，都是会提醒的，但是不排除像我这种特殊情况。所以，当真机调试出现迷之Bug时，不妨看看是不是这个问题。</li>
</ul>
</li>
<li><p>Bug 1 Correct Code</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> STATUS_WAITING = <span class="number">0</span> <span class="comment">// 应用开始时状态</span></div><div class="line"><span class="keyword">const</span> STATUS_RUNNING = <span class="number">1</span> <span class="comment">// 应用计时状态</span></div><div class="line"><span class="keyword">const</span> STATUS_COMPLETED = <span class="number">2</span> <span class="comment">// 应用完成状态</span></div><div class="line"></div><div class="line">Page(&#123;</div><div class="line">  data: &#123;</div><div class="line">    <span class="comment">// 计时状态 - 动态</span></div><div class="line">    status: STATUS_WAITING</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  startTimer: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.data.status !== STATUS_RUNNING) &#123;</div><div class="line">      <span class="comment">// Something</span></div><div class="line">    &#125; <span class="keyword">else</span> &#123;</div><div class="line">      <span class="comment">// Something</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li><p>Bug 2 - Layout Change - e.target.offsetTop</p>
<ul>
<li>Bug 2 Code</li>
</ul>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action-sheet</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;actionSheetHidden&#125;&#125;"</span> <span class="attr">bindchange</span>=<span class="string">"actionSheetChange"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;actionSheetItems&#125;&#125;"</span>&gt;</span></div><div class="line">    	<span class="tag">&lt;<span class="name">action-sheet-item</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">bindtap</span>=<span class="string">"bindItemTap"</span> <span class="attr">data-name</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span>&gt;</span>&#123;&#123;item&#125;&#125;</div><div class="line">    	<span class="tag">&lt;/<span class="name">action-sheet-item</span>&gt;</span></div><div class="line">    <span class="tag">&lt;/<span class="name">block</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action-sheet-cancel</span> <span class="attr">class</span>=<span class="string">"cancel"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">action-sheet-cancel</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action-sheet</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bindItemTap: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">	<span class="keyword">let</span> idx = e.target.offsetTop / <span class="number">38</span></div><div class="line">	<span class="comment">// 使用idx去判断点击了actionSheet中哪一个按钮</span></div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      selectedTime: PIG_TIME[PIG_NAME_ARR[idx]],</div><div class="line">      showTime: PIG_TIME[PIG_NAME_ARR[idx]] + <span class="string">":00"</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>Bug 2 Code Review</p>
<ul>
<li>这段代码同样在模拟器上跑的好好的，但是一到真机上就出现Bug（卡死）。后来分析过后主要发现是布局不一样。同样是iPhone 6S Plus，模拟器6SP上的(x, y)坐标与真机6SP上的(x, y)坐标有区别，有少量的偏移。所以，得到的offSet不能被38整除。使用浮点数值作为数组下标值，结果可想而知。actionSheet按钮判断应使用<code>id</code>判断actionSheet的按钮。</li>
</ul>
</li>
<li><p>Bug 2 Correct Code</p>
<figure class="highlight xml"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">action-sheet</span> <span class="attr">hidden</span>=<span class="string">"&#123;&#123;actionSheetHidden&#125;&#125;"</span> <span class="attr">bindchange</span>=<span class="string">"actionSheetChange"</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">block</span> <span class="attr">wx:for</span>=<span class="string">"&#123;&#123;actionSheetItems&#125;&#125;"</span>&gt;</span></div><div class="line">		<span class="tag">&lt;<span class="name">action-sheet-item</span> <span class="attr">id</span>=<span class="string">"&#123;&#123;index&#125;&#125;"</span> <span class="attr">class</span>=<span class="string">"item"</span> <span class="attr">bindtap</span>=<span class="string">"bindItemTap"</span> <span class="attr">data-name</span>=<span class="string">"&#123;&#123;item&#125;&#125;"</span>&gt;</span>&#123;&#123;item&#125;&#125;</div><div class="line">		<span class="tag">&lt;/<span class="name">action-sheet-item</span>&gt;</span></div><div class="line">	<span class="tag">&lt;/<span class="name">block</span>&gt;</span></div><div class="line">	<span class="tag">&lt;<span class="name">action-sheet-cancel</span> <span class="attr">class</span>=<span class="string">"cancel"</span>&gt;</span>Cancel<span class="tag">&lt;/<span class="name">action-sheet-cancel</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">action-sheet</span>&gt;</span></div></pre></td></tr></table></figure>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">bindItemTap: <span class="function"><span class="keyword">function</span> (<span class="params">e</span>) </span>&#123;</div><div class="line">    <span class="keyword">let</span> idx = e.currentTarget.id</div><div class="line">	<span class="comment">// 使用idx去判断点击了actionSheet中哪一个按钮</span></div><div class="line">    <span class="keyword">this</span>.setData(&#123;</div><div class="line">      selectedTime: PIG_TIME[PIG_NAME_ARR[idx]],</div><div class="line">      showTime: PIG_TIME[PIG_NAME_ARR[idx]] + <span class="string">":00"</span></div><div class="line">    &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
</ul>
<hr>
<ul>
<li>Bug 3 - 真机代码大小限制<ul>
<li>微信小程序限制了小程序大小为1M以内。而由于我们队伍的小程序有许多资源（音频、图片）等，所以项目文件夹的大小是远远超过了1M的。那怎么办？只有把资源文件放在后端，再进行资源请求。我们把资源放在了Github，然后在使用过程对资源进行了请求，请求后进行缓存，避免二次加载。这样做后，项目文件立刻降到了400多Kb。我觉得代码限制，这个点也是跑模拟器的时候不会注意到的。而对于部分开发者（如打算把Native app完全迁移的朋友），哪怕除去资源文件，我的纯代码就是这么大，微信不给上传，怎么办？我觉得解决方案应该能够参考iOS的热更新，把部分程序放在后端，在实际用到页面后再进行请求。</li>
</ul>
</li>
</ul>
<hr>
</li>
</ul>
</li>
</ul>
</li>
<li><p>小程序的应用前景</p>
<ul>
<li><p>作为一个希望有产品思维的iOS码农，我觉得小程序未来在部分领域是十分有潜力的，下图是我个人比较看好的小程序应用方向。我认为，小程序正正应该是“用完即走”，过多的停留还是应该留给Native App来处理。毕竟，总不可能在微信里面在造一个小微信吧:-P？</p>
<img src="/2016/10/09/我所理解的小程序/3.png" alt="WechatApp Application" title="WechatApp Application">
</li>
<li><p>Wechat App和RN，我个人感觉还是蛮大区别的，RN更多的是应用在Hybrid App中，但Wechat App由于其不能在浏览器中打开，可能更多的还是会自成一派。</p>
</li>
<li><p>最后我想东拼西凑的一段话来结束这篇文章，望博君一笑：</p>
<blockquote>
<p>不懂互联网的普通人往往过高的估算小程序的价值与意义，而懂互联网的程序员往往是低估了小程序的未来价值。在我看来，唯一不变的只有变化，何不拥抱这场变化？Just Kiss The Change！</p>
</blockquote>
</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Last Edited：2016.10.9</li>
<li>Author：@Seahub</li>
<li>Please <a href="Seahubc@qq.com">contact me</a> if you want to share this Article, 3Q~</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;摘要：Hackathon的见闻与微信小程序的真机初体验&lt;/p&gt;
    
    </summary>
    
      <category term="微信小程序" scheme="http://yoursite.com/categories/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
    
      <category term="Seahub" scheme="http://yoursite.com/tags/Seahub/"/>
    
      <category term="微信小程序" scheme="http://yoursite.com/tags/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F/"/>
    
      <category term="WechatApp" scheme="http://yoursite.com/tags/WechatApp/"/>
    
      <category term="Hackathon" scheme="http://yoursite.com/tags/Hackathon/"/>
    
      <category term="iFanr x Segmentfault" scheme="http://yoursite.com/tags/iFanr-x-Segmentfault/"/>
    
  </entry>
  
  <entry>
    <title>在校园网上使用IPv6</title>
    <link href="http://yoursite.com/2016/09/25/%E5%9C%A8%E6%A0%A1%E5%9B%AD%E7%BD%91%E4%B8%8A%E4%BD%BF%E7%94%A8IPv6/"/>
    <id>http://yoursite.com/2016/09/25/在校园网上使用IPv6/</id>
    <published>2016-09-25T14:48:13.000Z</published>
    <updated>2016-10-13T04:42:40.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>摘要：折腾校园网IPv6的两三事</p>
<a id="more"></a>
<hr>
</li>
<li><p>前言</p>
<ul>
<li>之前一直有听闻校园网能够使用IPv6，奈何不是没时间折腾，就是忘了这件事。最近听周边的朋友研究IPv6的使用，于是掺和折腾了一把。一开始掉进了一个坑，以为有IPv6的地址便可，后来发现还要一些小配置。希望借此文整理一下思路，同时也供后人稍作参考，减少掉坑率。</li>
</ul>
</li>
<li><p>思路</p>
<ol>
<li><p>获取IPv6地址</p>
</li>
<li><p>设置IPv6 DNS</p>
</li>
<li><p>修改hosts文件的域名-地址映射关系，使得访问域名时优先访问IPv6的地址，否则我们每次访问网站的时候都需要记着该网站IPv6的地址</p>
<blockquote>
<p>hosts知识补充：Hosts 文件本来是用来提高解析效率。在进行 DNS 请求以前，系统会先检查自己的 Hosts 文件中是否有这个地址映射关系，如果有则调用这个 IP 地址映射，如果没有再向已知的 DNS 服务器提出域名解析。也就是说 Hosts 的请求级别比 DNS 高。当你的 Hosts 文件里面有对应的 IP 时，它就会直接访问那个 IP，而不用通过 DNS。</p>
<p>作者：Wildog<br>来源：<a href="https://www.zhihu.com/question/19782572/answer/12946786" target="_blank" rel="external">知乎 - 修改 hosts 文件的原理是什么?</a></p>
</blockquote>
</li>
</ol>
</li>
<li><p>测试环境</p>
<ul>
<li>macOS Sierra 10.12</li>
<li>SCAU Education Net</li>
<li>极路由固件版本 1.0.7.13499s</li>
</ul>
</li>
<li><p>实操</p>
<ol>
<li><p>获取IPv6地址</p>
<ol>
<li><p>登录极路由后台, 后台默认密码: admin/wifi密码</p>
<ul>
<li><p><a href="http://www.4006024680.com/" target="_blank" rel="external">极路由后台登录</a></p>
</li>
<li><p>点击智能插件 - 安装插件 - 教育网IPv6</p>
<img src="/2016/09/25/在校园网上使用IPv6/1.png" alt="IPv6 Plugin Installing" title="IPv6 Plugin Installing">
</li>
</ul>
</li>
<li><p>配置插件 - 更改接入方式为IPv6中继（具体视不同高校进行不同设置）</p>
<img src="/2016/09/25/在校园网上使用IPv6/2.png" alt="IPv6 Plugin Settings" title="IPv6 Plugin Settings">
</li>
<li><p>重启路由器</p>
</li>
<li><p>重新进入路由器后台 - 点击系统设置 - 查看是否成功获取了IPv6地址</p>
<img src="/2016/09/25/在校园网上使用IPv6/3.png" alt="IPv6 Address" title="IPv6 Address">
</li>
</ol>
</li>
<li><p>设置IPv6 DNS</p>
<ol>
<li>更改本机首选DNS为谷歌IPv6 DNS<ul>
<li>谷歌IPv6 DNS1：2001:4860:4860::8888</li>
<li>谷歌IPv6 DNS2：2001:4860:4860::8844</li>
<li>DNS修改方式<ul>
<li><a href="http://jingyan.baidu.com/article/fc07f9891f626712ffe519cf.html" target="_blank" rel="external">macOS</a></li>
<li><a href="http://jingyan.baidu.com/article/f71d60375584591ab641d13c.html" target="_blank" rel="external">windows</a></li>
<li><a href="http://jingyan.baidu.com/article/870c6fc32c028eb03fe4be30.html" target="_blank" rel="external">linux</a></li>
</ul>
</li>
</ul>
</li>
<li><p>登录<a href="http://test-ipv6.com/" target="_blank" rel="external">Test-IPv6</a>网站进行测试，是否成功进行了配置</p>
<ul>
<li><p>若得到的不是类似下图的页面，请检查IPv6地址与IPv6 DNS是否成功设置</p>
<img src="/2016/09/25/在校园网上使用IPv6/4.png" alt="IPv6 Testing" title="IPv6 Testing">
</li>
</ul>
</li>
</ol>
</li>
<li><p>更改hosts</p>
<ol>
<li><p>上网获取hosts（这里个人推荐：<a href="https://serve.netsh.org/pub/ipv6-hosts/" target="_blank" rel="external">奶齿NetSh</a>，选择所需要的IPv6地址后即可下载)</p>
</li>
<li><p>经常使用百度云盘的用户，建议在下载的hosts文件中，再增加以下hosts，以IPv6的方式逃离限速百度云的魔爪</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">#Baiducloud</div><div class="line">2400:da00::dbf:0:6666 p.baidupcs.com</div><div class="line">2400:da00::dbf:0:6666 nj.baidupcs.com</div><div class="line">2400:da00::dbf:0:6666 qd.baidupcs.com</div><div class="line">2400:da00::dbf:0:6666 cdn.baidupcs.com</div><div class="line">2400:da00::dbf:0:6666 hot.baidupcs.com</div><div class="line">2400:da00::dbf:0:6666 www.baidupcs.com</div><div class="line">2400:da00::dbf:0:6666 hot.cdn.baidupcs.com</div><div class="line">2400:da00::dbf:0:6666 d.pcs.baidu.com</div><div class="line">#END baiducloud</div></pre></td></tr></table></figure>
</li>
<li><p>登录<a href="www.google.com">谷歌</a>，测试是否成功配置</p>
</li>
</ol>
</li>
<li><p>Enjoy!</p>
<ul>
<li><p>下图为SCAU IPv6的平均网速</p>
<img src="/2016/09/25/在校园网上使用IPv6/5.png" alt="IPv6 Showing" title="IPv6 Showing">
</li>
</ul>
</li>
</ol>
</li>
<li><p>后记</p>
<ul>
<li><p>在使用了IPv6后，第一个感觉就是苹果的服务明显快了。以前通过shadowsocks/VPN/8.8.8.8，延迟感觉还是颇高，下载速率也普遍维持在500KB/s左右。用了IPv6后，平均下载速度大概为1.5M/s，速率提升之大实在令人感慨。</p>
</li>
<li><p>本文中提及的方法都是本人所采用的方法，只具有参考意义。大家也可以通过其他方法获得IPv6的地址（比如SCAU还能通过网线直连电脑的方式获得IPv6地址）。本文，仅作参考。</p>
</li>
</ul>
<hr>
<ul>
<li>Last Edited：2016.9.25</li>
<li>Author：@Seahub</li>
<li>Please <a href="Seahubc@qq.com">contact me</a> if you want to share this Article, 3Q~</li>
</ul>
</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;摘要：折腾校园网IPv6的两三事&lt;/p&gt;
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="Seahub" scheme="http://yoursite.com/tags/Seahub/"/>
    
      <category term="SCAU" scheme="http://yoursite.com/tags/SCAU/"/>
    
      <category term="IPv6" scheme="http://yoursite.com/tags/IPv6/"/>
    
      <category term="校园网" scheme="http://yoursite.com/tags/%E6%A0%A1%E5%9B%AD%E7%BD%91/"/>
    
      <category term="教育网" scheme="http://yoursite.com/tags/%E6%95%99%E8%82%B2%E7%BD%91/"/>
    
  </entry>
  
  <entry>
    <title>Hello, My Blog</title>
    <link href="http://yoursite.com/2016/09/17/HelloMyBlog/"/>
    <id>http://yoursite.com/2016/09/17/HelloMyBlog/</id>
    <published>2016-09-17T12:19:43.000Z</published>
    <updated>2016-10-13T06:56:59.000Z</updated>
    
    <content type="html"><![CDATA[<ul>
<li><p>摘要：开博客的原因以及一些个人感触</p>
<a id="more"></a>
<hr>
</li>
<li><p>小记</p>
<ul>
<li>自从上大学以来，每天都在接触新的知识。学得越多，让我感觉不会的也就越多。学得虽多，但是由于日常性情懒惰，闲于整理，故一直对许多知识结构不是十分清楚。希望借助本博客，整理好自己的学习体系，逐渐提高自己对知识的整体把握度。</li>
</ul>
</li>
<li><p>博客相关</p>
<ul>
<li>博客内容均为原创，若文章中有相关的参考资料，将会以引用方式标注参考内容的作者、并标明原作者以及原链接，以引导读者进一步阅读更多相关资料</li>
<li>博客每篇文章最底部会有一个”Last Edited”表示文章的最后修订状态<ul>
<li>修订一般为内容的修正，代码风格的更新等</li>
<li>特别重要的修订将会在文章标题标注 / 以补充文章的形式出现</li>
</ul>
</li>
<li>作者：@Seahub</li>
<li>QQEmail：Seahubc@qq.com</li>
<li>Gmail：Seahubc@gmail.com</li>
</ul>
</li>
</ul>
<hr>
<ul>
<li>Last Edited：2016.10.13</li>
<li>Author：@Seahub</li>
<li>Please <a href="Seahubc@qq.com">contact me</a> if you want to share this Article, 3Q~</li>
</ul>
]]></content>
    
    <summary type="html">
    
      &lt;ul&gt;
&lt;li&gt;&lt;p&gt;摘要：开博客的原因以及一些个人感触&lt;/p&gt;
    
    </summary>
    
      <category term="小记" scheme="http://yoursite.com/categories/%E5%B0%8F%E8%AE%B0/"/>
    
    
      <category term="Seahub" scheme="http://yoursite.com/tags/Seahub/"/>
    
  </entry>
  
</feed>
